
## IMPORTANT: Define all settings specific to this machine in .bashrc_local!

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Options for history
HISTCONTROL=ignoreboth # ignorespace + ignoredups
HISTFILESIZE=1000000   # 1M
HISTSIZE=10000         # 10k

# If vim is installed, set it as main console editor.
if [ -x "$(command -v vim)" ]; then
    export EDITOR=vim
    alias e=$EDITOR
    alias se="sudo $EDITOR"
fi

# I initialize nvm here because it is needed on each shell initialization
# in order to work, but I also initialize it in profile because that way it
# is available for applications like emacs.
source /usr/share/nvm/init-nvm.sh

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# enable completion for git
if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Integrate FZF (fuzzy finder) with bash (so it triggers on CTRL-R and similar).
if [ -f /usr/share/fzf/completion.bash ]; then . /usr/share/fzf/completion.bash; fi
if [ -f /usr/share/fzf/key-bindings.bash ]; then . /usr/share/fzf/key-bindings.bash; fi

############################# PROMPT #################################
Color_Off="\[\033[0m\]"       # Text Reset
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
IRed="\[\033[0;91m\]"         # Intense red
PathShort="\w"

# show git information in prompt
if [ -f ~/.git-prompt.sh ]; then
    GIT_PS1_SHOWDIRTYSTATE="true"
    GIT_PS1_SHOWUNTRACKEDFILES="true"
    GIT_PS1_SHOWUPSTREAM="auto"

    . ~/.git-prompt.sh  # Script that brings __git_ps1 function

    # Set prompt to use __git_ps1 and add additional colors.
    export PS1=$Color_Off'$(git branch &>/dev/null;\
    if [ $? -eq 0 ]; then \
      echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
      if [ "$?" -eq "0" ]; then \
        # @4 - Clean repository - nothing to commit
        echo "'$Green'"$(__git_ps1 "[%s]"); \
      else \
        # @5 - Changes to working tree
        echo "'$IRed'"$(__git_ps1 "{%s}"); \
      fi) '$Yellow$PathShort$Color_Off'\$ "; \
    else \
      # @2 - Prompt when not in GIT repo
      echo "'$Yellow$PathShort$Color_Off'\$ "; \
    fi)'
else
    # If for some reason there is no git-prompt, use normal prompt.
    export PS1=$Yellow$PathShort$Color_Off\$
fi

# Show only the last 3 directory names: this keeps prompt from becoming too long.
PROMPT_DIRTRIM=3
######################################################################


################### Try to make `less` output nicer #######################

export LESS=-R  # Tells `less` to evaluate ansi escape codes.

## Lines below tell less how to show decorated (bold, underlined, ...) text when it encounters it.
## Less does not use this for ansi escape codes, but for other weirder formats that it understands,
## for example the format that `man` uses, so called overstriking (https://unix.stackexchange.com/questions/118707/what-is-the-name-of-the-formatting-output-from-man).
## What we do below is tell it to show bold as bold + blue, to show underline as underline + bold,
## via ansi escape codes.
## In practice this affects only `man` that I know of so far, since it uses that weird old format for text decorations,
## so basically this comes down to having nicer `man` output (because `man` uses less).
## SO post about this: https://unix.stackexchange.com/questions/108699/documentation-on-less-termcap-variables .
export LESS_TERMCAP_mb="$(printf '%b' '\e[1;36m')"; a="${a%_}"
export LESS_TERMCAP_md="$(printf '%b' '\e[1;94m')"; a="${a%_}"
export LESS_TERMCAP_me="$(printf '%b' '\e[0m')"; a="${a%_}"
export LESS_TERMCAP_so="$(printf '%b' '\e[01;33m')"; a="${a%_}"
export LESS_TERMCAP_se="$(printf '%b' '\e[0m')"; a="${a%_}"
export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7) # white
export LESS_TERMCAP_ue="$(printf '%b' '\e[0m')"; a="${a%_}"

###########################################################################

ghfrb() {
    if [ -z "$1" ]; then
        echo "Usage: ghfrb <git_user>:<branch>"
        echo "  ghfrb stands for \"GitHub Fetch Remote Branch\" and will"
        echo "  fetch a specified remote branch from the specified GitHub user"
        echo "  for the repo you are currently in (their fork of it)."
        return 1
    fi

    GH_REPO_NAME=$(git remote -v | grep origin | grep fetch | awk '{print $2}' | sed 's/.*:\(.*\)\/\(.*\)\.git/\2/')
    GH_USER_NAME=$(echo "$1" | cut -d':' -f1)
    BRANCH=$(echo "$1" | cut -d':' -f2)

    GIT_FETCH_CMD="git fetch git@github.com:${GH_USER_NAME}/${GH_REPO_NAME} ${BRANCH}:${GH_USER_NAME}_${BRANCH}"
    GIT_CO_CMD="git co ${GH_USER_NAME}_${BRANCH}"

    echo "> $GIT_FETCH_CMD"
    $GIT_FETCH_CMD

    echo "> $GIT_CO_CMD"
    $GIT_CO_CMD
}


# Settings specific to this machine
[ -f "$HOME/.bashrc_local" ] && source "$HOME/.bashrc_local"
